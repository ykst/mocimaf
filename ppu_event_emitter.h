// *** WARNING ***
// This file is generated by genevents.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "event_id.h"
#include "ppu_event_listener.h"
#include "list.h"
#include "logger_event_emitter.h"

typedef struct _ppu_event_listener_on_scanline {
    list_t list_entry;
    void *context;
    ppu_event_callback_on_scanline_t callback;
} _ppu_event_listener_on_scanline_t;
typedef struct _ppu_event_listener_on_frame {
    list_t list_entry;
    void *context;
    ppu_event_callback_on_frame_t callback;
} _ppu_event_listener_on_frame_t;
typedef struct _ppu_event_listener_on_sprite0_hit {
    list_t list_entry;
    void *context;
    ppu_event_callback_on_sprite0_hit_t callback;
} _ppu_event_listener_on_sprite0_hit_t;
typedef struct _ppu_event_listener_on_vblank {
    list_t list_entry;
    void *context;
    ppu_event_callback_on_vblank_t callback;
} _ppu_event_listener_on_vblank_t;
typedef struct _ppu_event_listener_on_reg {
    list_t list_entry;
    void *context;
    ppu_event_callback_on_reg_t callback;
} _ppu_event_listener_on_reg_t;

typedef struct ppu_event_emitter {
    list_head_t scanline_listeners;
    list_head_t frame_listeners;
    list_head_t sprite0_hit_listeners;
    list_head_t vblank_listeners;
    list_head_t reg_listeners;
    logger_event_emitter_t *shared_logger_emitter;
} ppu_event_emitter_t;

static inline int ppu_event_attach_listener(ppu_event_emitter_t *self, ppu_event_listener_t *listener)
{
    if (listener->on_scanline) {
        _ppu_event_listener_on_scanline_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_scanline;
        list_append(&self->scanline_listeners, &elem->list_entry);
    }
    if (listener->on_frame) {
        _ppu_event_listener_on_frame_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_frame;
        list_append(&self->frame_listeners, &elem->list_entry);
    }
    if (listener->on_sprite0_hit) {
        _ppu_event_listener_on_sprite0_hit_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_sprite0_hit;
        list_append(&self->sprite0_hit_listeners, &elem->list_entry);
    }
    if (listener->on_vblank) {
        _ppu_event_listener_on_vblank_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_vblank;
        list_append(&self->vblank_listeners, &elem->list_entry);
    }
    if (listener->on_reg) {
        _ppu_event_listener_on_reg_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_reg;
        list_append(&self->reg_listeners, &elem->list_entry);
    }
    return SUCCESS;
error:
    return NG;
}

static inline void ppu_event_set_logger_emitter(ppu_event_emitter_t *self, logger_event_emitter_t *logger_emitter)
{
    self->shared_logger_emitter = logger_emitter;
}

// provides packed pixels of a processed scanline, called on right after entering hblank
static inline void ppu_event_emit_scanline(ppu_event_emitter_t *self, ppu_ref ppu, int line, const uint16_t * dots)
{
    _ppu_event_listener_on_scanline_t *elem = NULL;
    list_foreach (&self->scanline_listeners, elem) {
        elem->callback(elem->context, ppu, line, dots);
    }
}
// called on entering vblank, regardless of rendering was enabled or not
static inline void ppu_event_emit_frame(ppu_event_emitter_t *self, ppu_ref ppu, uint64_t frames)
{
    _ppu_event_listener_on_frame_t *elem = NULL;
    list_foreach (&self->frame_listeners, elem) {
        elem->callback(elem->context, ppu, frames);
    }
}
// called on sprite 0 hit
static inline void ppu_event_emit_sprite0_hit(ppu_event_emitter_t *self, ppu_ref ppu)
{
    _ppu_event_listener_on_sprite0_hit_t *elem = NULL;
    list_foreach (&self->sprite0_hit_listeners, elem) {
        elem->callback(elem->context, ppu);
    }
}
// called on set vblank flag
static inline void ppu_event_emit_vblank(ppu_event_emitter_t *self, ppu_ref ppu)
{
    _ppu_event_listener_on_vblank_t *elem = NULL;
    list_foreach (&self->vblank_listeners, elem) {
        elem->callback(elem->context, ppu);
    }
}
// called on register read/write
static inline void ppu_event_emit_reg(ppu_event_emitter_t *self, ppu_ref ppu, bool is_read, uint8_t value, ppu_reg_addr_t target)
{
    _ppu_event_listener_on_reg_t *elem = NULL;
    list_foreach (&self->reg_listeners, elem) {
        elem->callback(elem->context, ppu, is_read, value, target);
    }
}

static inline void ppu_event_detach_listener(ppu_event_emitter_t *self, void *context)
{
    {
        _ppu_event_listener_on_scanline_t *elem = NULL;

        list_foreach (&self->scanline_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->scanline_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _ppu_event_listener_on_frame_t *elem = NULL;

        list_foreach (&self->frame_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->frame_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _ppu_event_listener_on_sprite0_hit_t *elem = NULL;

        list_foreach (&self->sprite0_hit_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->sprite0_hit_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _ppu_event_listener_on_vblank_t *elem = NULL;

        list_foreach (&self->vblank_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->vblank_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _ppu_event_listener_on_reg_t *elem = NULL;

        list_foreach (&self->reg_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->reg_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
}

static inline void ppu_event_detach_listener_on_scanline(ppu_event_emitter_t *self, void *context)
{
    _ppu_event_listener_on_scanline_t *elem = NULL;
    list_foreach (&self->scanline_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->scanline_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void ppu_event_detach_listener_on_frame(ppu_event_emitter_t *self, void *context)
{
    _ppu_event_listener_on_frame_t *elem = NULL;
    list_foreach (&self->frame_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->frame_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void ppu_event_detach_listener_on_sprite0_hit(ppu_event_emitter_t *self, void *context)
{
    _ppu_event_listener_on_sprite0_hit_t *elem = NULL;
    list_foreach (&self->sprite0_hit_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->sprite0_hit_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void ppu_event_detach_listener_on_vblank(ppu_event_emitter_t *self, void *context)
{
    _ppu_event_listener_on_vblank_t *elem = NULL;
    list_foreach (&self->vblank_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->vblank_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void ppu_event_detach_listener_on_reg(ppu_event_emitter_t *self, void *context)
{
    _ppu_event_listener_on_reg_t *elem = NULL;
    list_foreach (&self->reg_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->reg_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}

static inline void ppu_event_detach_all(ppu_event_emitter_t *self)
{
    {
        _ppu_event_listener_on_scanline_t *elem = NULL;

        list_foreach (&self->scanline_listeners, elem) {
            list_remove(&self->scanline_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _ppu_event_listener_on_frame_t *elem = NULL;

        list_foreach (&self->frame_listeners, elem) {
            list_remove(&self->frame_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _ppu_event_listener_on_sprite0_hit_t *elem = NULL;

        list_foreach (&self->sprite0_hit_listeners, elem) {
            list_remove(&self->sprite0_hit_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _ppu_event_listener_on_vblank_t *elem = NULL;

        list_foreach (&self->vblank_listeners, elem) {
            list_remove(&self->vblank_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _ppu_event_listener_on_reg_t *elem = NULL;

        list_foreach (&self->reg_listeners, elem) {
            list_remove(&self->reg_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
