// *** WARNING ***
// This file is generated by genevents.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "utils.h"
#include "core.h"

typedef void (*core_event_callback_on_start_t)(void *context, core_ref core);
typedef void (*core_event_callback_on_pause_t)(void *context, core_ref core);
typedef void (*core_event_callback_on_resume_t)(void *context, core_ref core);
typedef void (*core_event_callback_on_poll_in_pause_t)(void *context, core_ref core);
typedef void (*core_event_callback_on_quit_t)(void *context, core_ref core);
typedef void (*core_event_callback_on_destroy_t)(void *context);

typedef struct core_event_listener {
    void *context;
    // called after cold boot, before running main loop
    core_event_callback_on_start_t on_start;
    // called on pause
    core_event_callback_on_pause_t on_pause;
    // called on resume from paused state
    core_event_callback_on_resume_t on_resume;
    // process events while pausing
    core_event_callback_on_poll_in_pause_t on_poll_in_pause;
    // called on quit
    core_event_callback_on_quit_t on_quit;
    // called on core_destroy (handler is automatically generated)
    core_event_callback_on_destroy_t on_destroy;
} core_event_listener_t;
