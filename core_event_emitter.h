// *** WARNING ***
// This file is generated by genevents.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "event_id.h"
#include "core_event_listener.h"
#include "list.h"
#include "logger_event_emitter.h"

typedef struct _core_event_listener_on_start {
    list_t list_entry;
    void *context;
    core_event_callback_on_start_t callback;
} _core_event_listener_on_start_t;
typedef struct _core_event_listener_on_pause {
    list_t list_entry;
    void *context;
    core_event_callback_on_pause_t callback;
} _core_event_listener_on_pause_t;
typedef struct _core_event_listener_on_resume {
    list_t list_entry;
    void *context;
    core_event_callback_on_resume_t callback;
} _core_event_listener_on_resume_t;
typedef struct _core_event_listener_on_poll_in_pause {
    list_t list_entry;
    void *context;
    core_event_callback_on_poll_in_pause_t callback;
} _core_event_listener_on_poll_in_pause_t;
typedef struct _core_event_listener_on_quit {
    list_t list_entry;
    void *context;
    core_event_callback_on_quit_t callback;
} _core_event_listener_on_quit_t;
typedef struct _core_event_listener_on_destroy {
    list_t list_entry;
    void *context;
    core_event_callback_on_destroy_t callback;
} _core_event_listener_on_destroy_t;

typedef struct core_event_emitter {
    list_head_t start_listeners;
    list_head_t pause_listeners;
    list_head_t resume_listeners;
    list_head_t poll_in_pause_listeners;
    list_head_t quit_listeners;
    list_head_t destroy_listeners;
    logger_event_emitter_t *shared_logger_emitter;
} core_event_emitter_t;

static inline int core_event_attach_listener(core_event_emitter_t *self, core_event_listener_t *listener)
{
    if (listener->on_start) {
        _core_event_listener_on_start_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_start;
        list_append(&self->start_listeners, &elem->list_entry);
    }
    if (listener->on_pause) {
        _core_event_listener_on_pause_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_pause;
        list_append(&self->pause_listeners, &elem->list_entry);
    }
    if (listener->on_resume) {
        _core_event_listener_on_resume_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_resume;
        list_append(&self->resume_listeners, &elem->list_entry);
    }
    if (listener->on_poll_in_pause) {
        _core_event_listener_on_poll_in_pause_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_poll_in_pause;
        list_append(&self->poll_in_pause_listeners, &elem->list_entry);
    }
    if (listener->on_quit) {
        _core_event_listener_on_quit_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_quit;
        list_append(&self->quit_listeners, &elem->list_entry);
    }
    if (listener->on_destroy) {
        _core_event_listener_on_destroy_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_destroy;
        list_append(&self->destroy_listeners, &elem->list_entry);
    }
    return SUCCESS;
error:
    return NG;
}

static inline void core_event_set_logger_emitter(core_event_emitter_t *self, logger_event_emitter_t *logger_emitter)
{
    self->shared_logger_emitter = logger_emitter;
}

// called after cold boot, before running main loop
static inline void core_event_emit_start(core_event_emitter_t *self, core_ref core)
{
    _core_event_listener_on_start_t *elem = NULL;
    list_foreach (&self->start_listeners, elem) {
        elem->callback(elem->context, core);
    }
}
// called on pause
static inline void core_event_emit_pause(core_event_emitter_t *self, core_ref core)
{
    if (self->shared_logger_emitter) {
        logger_event_emit_event_trace(self->shared_logger_emitter, EVENT_DOMAIN_ID_CORE, EVENT_ID_CORE_PAUSE);
    }

    _core_event_listener_on_pause_t *elem = NULL;
    list_foreach (&self->pause_listeners, elem) {
        elem->callback(elem->context, core);
    }
}
// called on resume from paused state
static inline void core_event_emit_resume(core_event_emitter_t *self, core_ref core)
{
    if (self->shared_logger_emitter) {
        logger_event_emit_event_trace(self->shared_logger_emitter, EVENT_DOMAIN_ID_CORE, EVENT_ID_CORE_RESUME);
    }

    _core_event_listener_on_resume_t *elem = NULL;
    list_foreach (&self->resume_listeners, elem) {
        elem->callback(elem->context, core);
    }
}
// process events while pausing
static inline void core_event_emit_poll_in_pause(core_event_emitter_t *self, core_ref core)
{
    _core_event_listener_on_poll_in_pause_t *elem = NULL;
    list_foreach (&self->poll_in_pause_listeners, elem) {
        elem->callback(elem->context, core);
    }
}
// called on quit
static inline void core_event_emit_quit(core_event_emitter_t *self, core_ref core)
{
    if (self->shared_logger_emitter) {
        logger_event_emit_event_trace(self->shared_logger_emitter, EVENT_DOMAIN_ID_CORE, EVENT_ID_CORE_QUIT);
    }

    _core_event_listener_on_quit_t *elem = NULL;
    list_foreach (&self->quit_listeners, elem) {
        elem->callback(elem->context, core);
    }
}
// called on core_destroy (handler is automatically generated)
static inline void core_event_emit_destroy(core_event_emitter_t *self)
{
    _core_event_listener_on_destroy_t *elem = NULL;
    list_foreach (&self->destroy_listeners, elem) {
        elem->callback(elem->context);
    }
}

static inline void core_event_detach_listener(core_event_emitter_t *self, void *context)
{
    {
        _core_event_listener_on_start_t *elem = NULL;

        list_foreach (&self->start_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->start_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _core_event_listener_on_pause_t *elem = NULL;

        list_foreach (&self->pause_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->pause_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _core_event_listener_on_resume_t *elem = NULL;

        list_foreach (&self->resume_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->resume_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _core_event_listener_on_poll_in_pause_t *elem = NULL;

        list_foreach (&self->poll_in_pause_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->poll_in_pause_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _core_event_listener_on_quit_t *elem = NULL;

        list_foreach (&self->quit_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->quit_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _core_event_listener_on_destroy_t *elem = NULL;

        list_foreach (&self->destroy_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->destroy_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
}

static inline void core_event_detach_listener_on_start(core_event_emitter_t *self, void *context)
{
    _core_event_listener_on_start_t *elem = NULL;
    list_foreach (&self->start_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->start_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void core_event_detach_listener_on_pause(core_event_emitter_t *self, void *context)
{
    _core_event_listener_on_pause_t *elem = NULL;
    list_foreach (&self->pause_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->pause_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void core_event_detach_listener_on_resume(core_event_emitter_t *self, void *context)
{
    _core_event_listener_on_resume_t *elem = NULL;
    list_foreach (&self->resume_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->resume_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void core_event_detach_listener_on_poll_in_pause(core_event_emitter_t *self, void *context)
{
    _core_event_listener_on_poll_in_pause_t *elem = NULL;
    list_foreach (&self->poll_in_pause_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->poll_in_pause_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void core_event_detach_listener_on_quit(core_event_emitter_t *self, void *context)
{
    _core_event_listener_on_quit_t *elem = NULL;
    list_foreach (&self->quit_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->quit_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void core_event_detach_listener_on_destroy(core_event_emitter_t *self, void *context)
{
    _core_event_listener_on_destroy_t *elem = NULL;
    list_foreach (&self->destroy_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->destroy_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}

static inline void core_event_detach_all(core_event_emitter_t *self)
{
    {
        _core_event_listener_on_start_t *elem = NULL;

        list_foreach (&self->start_listeners, elem) {
            list_remove(&self->start_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _core_event_listener_on_pause_t *elem = NULL;

        list_foreach (&self->pause_listeners, elem) {
            list_remove(&self->pause_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _core_event_listener_on_resume_t *elem = NULL;

        list_foreach (&self->resume_listeners, elem) {
            list_remove(&self->resume_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _core_event_listener_on_poll_in_pause_t *elem = NULL;

        list_foreach (&self->poll_in_pause_listeners, elem) {
            list_remove(&self->poll_in_pause_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _core_event_listener_on_quit_t *elem = NULL;

        list_foreach (&self->quit_listeners, elem) {
            list_remove(&self->quit_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _core_event_listener_on_destroy_t *elem = NULL;

        list_foreach (&self->destroy_listeners, elem) {
            list_remove(&self->destroy_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
