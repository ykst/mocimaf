// *** WARNING ***
// This file is generated by gendriver.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "utils.h"
#include "drivers.h"
#include "core.h"

// generated event detacher
void analyzer_driver_detach_cpu_decode(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_cpu_step(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_cpu_read(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_cpu_write(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_cpu_interrupt(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_core_start(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_core_pause(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_core_resume(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_core_poll_in_pause(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_ppu_frame(analyzer_driver_ref self, core_ref core);
void analyzer_driver_detach_ppu_scanline(analyzer_driver_ref self, core_ref core);

// required implementations
void analyzer_driver_destroy(analyzer_driver_ref self);
analyzer_driver_ref analyzer_driver_create(core_ref core);
void analyzer_driver_on_cpu_decode(analyzer_driver_ref self, cpu_ref cpu, uint16_t pc);
void analyzer_driver_on_cpu_step(analyzer_driver_ref self, cpu_ref cpu);
void analyzer_driver_on_cpu_read(analyzer_driver_ref self, cpu_ref cpu, uint16_t addr, size_t size);
void analyzer_driver_on_cpu_write(analyzer_driver_ref self, cpu_ref cpu, uint16_t addr, size_t length);
void analyzer_driver_on_cpu_interrupt(analyzer_driver_ref self, cpu_ref cpu, interruption_type_t acks);
void analyzer_driver_on_core_start(analyzer_driver_ref self, core_ref core);
void analyzer_driver_on_core_pause(analyzer_driver_ref self, core_ref core);
void analyzer_driver_on_core_resume(analyzer_driver_ref self, core_ref core);
void analyzer_driver_on_core_poll_in_pause(analyzer_driver_ref self, core_ref core);
void analyzer_driver_on_ppu_frame(analyzer_driver_ref self, ppu_ref ppu, uint64_t frames);
void analyzer_driver_on_ppu_scanline(analyzer_driver_ref self, ppu_ref ppu, int line, const uint16_t * dots);
