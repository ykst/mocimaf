// *** WARNING ***
// This file is generated by genevents.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "event_id.h"
#include "cpu_event_listener.h"
#include "list.h"
#include "logger_event_emitter.h"

typedef struct _cpu_event_listener_on_decode {
    list_t list_entry;
    void *context;
    cpu_event_callback_on_decode_t callback;
} _cpu_event_listener_on_decode_t;
typedef struct _cpu_event_listener_on_read {
    list_t list_entry;
    void *context;
    cpu_event_callback_on_read_t callback;
} _cpu_event_listener_on_read_t;
typedef struct _cpu_event_listener_on_write {
    list_t list_entry;
    void *context;
    cpu_event_callback_on_write_t callback;
} _cpu_event_listener_on_write_t;
typedef struct _cpu_event_listener_on_step {
    list_t list_entry;
    void *context;
    cpu_event_callback_on_step_t callback;
} _cpu_event_listener_on_step_t;
typedef struct _cpu_event_listener_on_interrupt {
    list_t list_entry;
    void *context;
    cpu_event_callback_on_interrupt_t callback;
} _cpu_event_listener_on_interrupt_t;

typedef struct cpu_event_emitter {
    list_head_t decode_listeners;
    list_head_t read_listeners;
    list_head_t write_listeners;
    list_head_t step_listeners;
    list_head_t interrupt_listeners;
    logger_event_emitter_t *shared_logger_emitter;
} cpu_event_emitter_t;

static inline int cpu_event_attach_listener(cpu_event_emitter_t *self, cpu_event_listener_t *listener)
{
    if (listener->on_decode) {
        _cpu_event_listener_on_decode_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_decode;
        list_append(&self->decode_listeners, &elem->list_entry);
    }
    if (listener->on_read) {
        _cpu_event_listener_on_read_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_read;
        list_append(&self->read_listeners, &elem->list_entry);
    }
    if (listener->on_write) {
        _cpu_event_listener_on_write_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_write;
        list_append(&self->write_listeners, &elem->list_entry);
    }
    if (listener->on_step) {
        _cpu_event_listener_on_step_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_step;
        list_append(&self->step_listeners, &elem->list_entry);
    }
    if (listener->on_interrupt) {
        _cpu_event_listener_on_interrupt_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_interrupt;
        list_append(&self->interrupt_listeners, &elem->list_entry);
    }
    return SUCCESS;
error:
    return NG;
}

static inline void cpu_event_set_logger_emitter(cpu_event_emitter_t *self, logger_event_emitter_t *logger_emitter)
{
    self->shared_logger_emitter = logger_emitter;
}

// called before decoding an instruction after processed interruption
static inline void cpu_event_emit_decode(cpu_event_emitter_t *self, cpu_ref cpu, uint16_t pc)
{
    if (self->shared_logger_emitter) {
        logger_event_emit_event_trace(self->shared_logger_emitter, EVENT_DOMAIN_ID_CPU, EVENT_ID_CPU_DECODE);
    }

    _cpu_event_listener_on_decode_t *elem = NULL;
    list_foreach (&self->decode_listeners, elem) {
        elem->callback(elem->context, cpu, pc);
    }
}
// called on cpu_read
static inline void cpu_event_emit_read(cpu_event_emitter_t *self, cpu_ref cpu, uint16_t addr, size_t size)
{
    if (self->shared_logger_emitter) {
        logger_event_emit_event_trace(self->shared_logger_emitter, EVENT_DOMAIN_ID_CPU, EVENT_ID_CPU_READ);
    }

    _cpu_event_listener_on_read_t *elem = NULL;
    list_foreach (&self->read_listeners, elem) {
        elem->callback(elem->context, cpu, addr, size);
    }
}
// called on cpu_write
static inline void cpu_event_emit_write(cpu_event_emitter_t *self, cpu_ref cpu, uint16_t addr, size_t length)
{
    if (self->shared_logger_emitter) {
        logger_event_emit_event_trace(self->shared_logger_emitter, EVENT_DOMAIN_ID_CPU, EVENT_ID_CPU_WRITE);
    }

    _cpu_event_listener_on_write_t *elem = NULL;
    list_foreach (&self->write_listeners, elem) {
        elem->callback(elem->context, cpu, addr, length);
    }
}
// called on decoded an instruction
static inline void cpu_event_emit_step(cpu_event_emitter_t *self, cpu_ref cpu)
{
    _cpu_event_listener_on_step_t *elem = NULL;
    list_foreach (&self->step_listeners, elem) {
        elem->callback(elem->context, cpu);
    }
}
// called on handled an interruption
static inline void cpu_event_emit_interrupt(cpu_event_emitter_t *self, cpu_ref cpu, interruption_type_t acks)
{
    _cpu_event_listener_on_interrupt_t *elem = NULL;
    list_foreach (&self->interrupt_listeners, elem) {
        elem->callback(elem->context, cpu, acks);
    }
}

static inline void cpu_event_detach_listener(cpu_event_emitter_t *self, void *context)
{
    {
        _cpu_event_listener_on_decode_t *elem = NULL;

        list_foreach (&self->decode_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->decode_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _cpu_event_listener_on_read_t *elem = NULL;

        list_foreach (&self->read_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->read_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _cpu_event_listener_on_write_t *elem = NULL;

        list_foreach (&self->write_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->write_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _cpu_event_listener_on_step_t *elem = NULL;

        list_foreach (&self->step_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->step_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
    {
        _cpu_event_listener_on_interrupt_t *elem = NULL;

        list_foreach (&self->interrupt_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->interrupt_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
}

static inline void cpu_event_detach_listener_on_decode(cpu_event_emitter_t *self, void *context)
{
    _cpu_event_listener_on_decode_t *elem = NULL;
    list_foreach (&self->decode_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->decode_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void cpu_event_detach_listener_on_read(cpu_event_emitter_t *self, void *context)
{
    _cpu_event_listener_on_read_t *elem = NULL;
    list_foreach (&self->read_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->read_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void cpu_event_detach_listener_on_write(cpu_event_emitter_t *self, void *context)
{
    _cpu_event_listener_on_write_t *elem = NULL;
    list_foreach (&self->write_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->write_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void cpu_event_detach_listener_on_step(cpu_event_emitter_t *self, void *context)
{
    _cpu_event_listener_on_step_t *elem = NULL;
    list_foreach (&self->step_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->step_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
static inline void cpu_event_detach_listener_on_interrupt(cpu_event_emitter_t *self, void *context)
{
    _cpu_event_listener_on_interrupt_t *elem = NULL;
    list_foreach (&self->interrupt_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->interrupt_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}

static inline void cpu_event_detach_all(cpu_event_emitter_t *self)
{
    {
        _cpu_event_listener_on_decode_t *elem = NULL;

        list_foreach (&self->decode_listeners, elem) {
            list_remove(&self->decode_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _cpu_event_listener_on_read_t *elem = NULL;

        list_foreach (&self->read_listeners, elem) {
            list_remove(&self->read_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _cpu_event_listener_on_write_t *elem = NULL;

        list_foreach (&self->write_listeners, elem) {
            list_remove(&self->write_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _cpu_event_listener_on_step_t *elem = NULL;

        list_foreach (&self->step_listeners, elem) {
            list_remove(&self->step_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
    {
        _cpu_event_listener_on_interrupt_t *elem = NULL;

        list_foreach (&self->interrupt_listeners, elem) {
            list_remove(&self->interrupt_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
