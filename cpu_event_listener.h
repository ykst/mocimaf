// *** WARNING ***
// This file is generated by genevents.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "utils.h"
#include "cpu.h"

typedef void (*cpu_event_callback_on_decode_t)(void *context, cpu_ref cpu, uint16_t pc);
typedef void (*cpu_event_callback_on_read_t)(void *context, cpu_ref cpu, uint16_t addr, size_t size);
typedef void (*cpu_event_callback_on_write_t)(void *context, cpu_ref cpu, uint16_t addr, size_t length);
typedef void (*cpu_event_callback_on_step_t)(void *context, cpu_ref cpu);
typedef void (*cpu_event_callback_on_interrupt_t)(void *context, cpu_ref cpu, interruption_type_t acks);

typedef struct cpu_event_listener {
    void *context;
    // called before decoding an instruction after processed interruption
    cpu_event_callback_on_decode_t on_decode;
    // called on cpu_read
    cpu_event_callback_on_read_t on_read;
    // called on cpu_write
    cpu_event_callback_on_write_t on_write;
    // called on decoded an instruction
    cpu_event_callback_on_step_t on_step;
    // called on handled an interruption
    cpu_event_callback_on_interrupt_t on_interrupt;
} cpu_event_listener_t;
