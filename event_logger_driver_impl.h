// *** WARNING ***
// This file is generated by gendriver.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "utils.h"
#include "drivers.h"
#include "core.h"

// generated event detacher
void event_logger_driver_detach_bus_int_asserted(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_bus_int_acked(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_bus_oamdma(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_bus_dmcdma(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_cpu_decode(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_cpu_read(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_cpu_write(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_ppu_sprite0_hit(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_ppu_vblank(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_ppu_reg(event_logger_driver_ref self, core_ref core);
void event_logger_driver_detach_logger_event_trace(event_logger_driver_ref self, core_ref core);

// required implementations
void event_logger_driver_destroy(event_logger_driver_ref self);
event_logger_driver_ref event_logger_driver_create(core_ref core);
void event_logger_driver_on_bus_int_asserted(event_logger_driver_ref self, interruption_type_t target);
void event_logger_driver_on_bus_int_acked(event_logger_driver_ref self, interruption_type_t target);
void event_logger_driver_on_bus_oamdma(event_logger_driver_ref self, uint16_t addr);
void event_logger_driver_on_bus_dmcdma(event_logger_driver_ref self, uint16_t addr);
void event_logger_driver_on_cpu_decode(event_logger_driver_ref self, cpu_ref cpu, uint16_t pc);
void event_logger_driver_on_cpu_read(event_logger_driver_ref self, cpu_ref cpu, uint16_t addr, size_t size);
void event_logger_driver_on_cpu_write(event_logger_driver_ref self, cpu_ref cpu, uint16_t addr, size_t length);
void event_logger_driver_on_ppu_sprite0_hit(event_logger_driver_ref self, ppu_ref ppu);
void event_logger_driver_on_ppu_vblank(event_logger_driver_ref self, ppu_ref ppu);
void event_logger_driver_on_ppu_reg(event_logger_driver_ref self, ppu_ref ppu, bool is_read, uint8_t value, ppu_reg_addr_t target);
void event_logger_driver_on_logger_event_trace(event_logger_driver_ref self, int domain_id, int event_id);
