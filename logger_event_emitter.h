// *** WARNING ***
// This file is generated by genevents.rb
// Keep untouched or ruin the abstraction
#pragma once
#include "event_id.h"
#include "logger_event_listener.h"
#include "list.h"

typedef struct _logger_event_listener_on_event_trace {
    list_t list_entry;
    void *context;
    logger_event_callback_on_event_trace_t callback;
} _logger_event_listener_on_event_trace_t;

typedef struct logger_event_emitter {
    list_head_t event_trace_listeners;
} logger_event_emitter_t;

static inline int logger_event_attach_listener(logger_event_emitter_t *self, logger_event_listener_t *listener)
{
    if (listener->on_event_trace) {
        _logger_event_listener_on_event_trace_t *elem = NULL;
        TALLOC(elem);
        elem->context = listener->context;
        elem->callback = listener->on_event_trace;
        list_append(&self->event_trace_listeners, &elem->list_entry);
    }
    return SUCCESS;
error:
    return NG;
}


// event trace
static inline void logger_event_emit_event_trace(logger_event_emitter_t *self, int domain_id, int event_id)
{
    _logger_event_listener_on_event_trace_t *elem = NULL;
    list_foreach (&self->event_trace_listeners, elem) {
        elem->callback(elem->context, domain_id, event_id);
    }
}

static inline void logger_event_detach_listener(logger_event_emitter_t *self, void *context)
{
    {
        _logger_event_listener_on_event_trace_t *elem = NULL;

        list_foreach (&self->event_trace_listeners, elem) {
            if (elem->context == context) {
                list_remove(&self->event_trace_listeners, &elem->list_entry);
                FREE(elem);
            }
        }
    }
}

static inline void logger_event_detach_listener_on_event_trace(logger_event_emitter_t *self, void *context)
{
    _logger_event_listener_on_event_trace_t *elem = NULL;
    list_foreach (&self->event_trace_listeners, elem) {
        if (elem->context == context) {
            list_remove(&self->event_trace_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}

static inline void logger_event_detach_all(logger_event_emitter_t *self)
{
    {
        _logger_event_listener_on_event_trace_t *elem = NULL;

        list_foreach (&self->event_trace_listeners, elem) {
            list_remove(&self->event_trace_listeners, &elem->list_entry);
            FREE(elem);
        }
    }
}
